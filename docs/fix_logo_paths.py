#!/usr/bin/env python3
"""
Fix logo paths in generated HTML files.
This script corrects the incorrect logo paths generated by the press theme.
"""
import os
import re
from pathlib import Path

def fix_logo_paths(build_dir):
    """Fix logo paths in all HTML files in the build directory."""
    build_path = Path(build_dir)
    
    # Find all HTML files
    html_files = list(build_path.rglob("*.html"))
    
    for html_file in html_files:
        try:
            with open(html_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Calculate the correct relative depth
            relative_depth = len(html_file.relative_to(build_path).parts) - 1
            correct_prefix = "../" * relative_depth if relative_depth > 0 else ""
            
            # Fix logo paths that have too many "../"
            # Pattern: src="../../_static/tatami-logo.png" -> src="../_static/tatami-logo.png"
            pattern = r'src="(\.\./)+(\.\./_static/tatami-logo\.png)"'
            replacement = f'src="{correct_prefix}_static/tatami-logo.png"'
            
            new_content = re.sub(pattern, replacement, content)
            
            # Also fix favicon paths if needed
            favicon_pattern = r'href="(\.\./)+(\.\./_static/favicon\.ico)"'
            favicon_replacement = f'href="{correct_prefix}_static/favicon.ico"'
            new_content = re.sub(favicon_pattern, favicon_replacement, new_content)
            
            if new_content != content:
                with open(html_file, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                print(f"Fixed logo paths in: {html_file.relative_to(build_path)}")
                
        except Exception as e:
            print(f"Error processing {html_file}: {e}")

if __name__ == "__main__":
    build_dir = Path(__file__).parent / "build" / "html"
    fix_logo_paths(build_dir)
    print("Logo path fixing complete!")
